version: '3.8'

services:
  app:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: image-processor
    ports:
      - "5001:5001"
    environment:
      - FLASK_ENV=prod
      - MONGODB_URI=mongodb://${MONGO_ROOT_USERNAME:-admin}:${MONGO_ROOT_PASSWORD:-password}@mongo:27017/image_processing?authSource=admin
      - REDIS_URL=redis://:${REDIS_PASSWORD:-redis_password}@redis:6379/0
      - AUTH_SERVICE_URL=http://auth-service:5002
      - AUTH_SERVICE_TIMEOUT=3  # Short timeout for auth requests
      - AUTH_SERVICE_MAX_RETRIES=3
      - AUTH_FALLBACK_MODE=permissive # Can be 'permissive' or 'restrictive'
    volumes:
      - ./uploads:/app/uploads
      - ./app/static:/app/app/static
      - ./app/logs:/app/app/logs
      - ~/.u2net:/home/appuser/.u2net
    depends_on:
      mongo:
        condition: service_healthy
      redis:
        condition: service_healthy
    restart: unless-stopped
    networks:
      - app-network
    healthcheck:
      test: [ "CMD", "curl", "-f", "http://localhost:5001/health" ]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
  
  auth-service:
    build:
      context: ./auth-service
      dockerfile: Dockerfile
    container_name: image-processor-auth
    restart: unless-stopped  # Restart on failure, except when manually stopped
    ports:
      - "5001:5001"
    environment:
      - FLASK_APP=app.py
      - FLASK_ENV=prod
      - MONGODB_URI=mongodb://${MONGO_ROOT_USERNAME:-admin}:${MONGO_ROOT_PASSWORD:-password}@mongo:27017/auth_db?authSource=admin
      - JWT_SECRET_KEY=${JWT_SECRET_KEY:-default_dev_secret_change_in_production}
      - TOKEN_EXPIRE_HOURS=24
      - HEALTH_CHECK_INCLUDES_DB=true
    volumes:
      - ./auth-service:/app
    depends_on:
      mongodb:
        condition: service_healthy
    networks:
      - app-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:5001/health || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 20s

  mongo:
    image: mongo:6.0
    ports:
      - "27017:27017"
    volumes:
      - mongodb_data:/data/db
            - ./mongo-init:/docker-entrypoint-initdb.d  # Initialization scripts

    environment:
      - MONGO_INITDB_ROOT_USERNAME=${MONGO_ROOT_USERNAME:-admin}
      - MONGO_INITDB_ROOT_PASSWORD=${MONGO_ROOT_PASSWORD:-password}
    restart: unless-stopped
    networks:
      - app-network
    healthcheck:
      test: echo 'db.runCommand("ping").ok' | mongosh localhost:27017/test --quiet
      interval: 20s
      timeout: 10s
      retries: 3
      start_period: 30s

  redis:
    image: redis:7.0-alpine
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    command: redis-server --requirepass ${REDIS_PASSWORD:-redis_password}
    restart: unless-stopped
    networks:
      - app-network
    healthcheck:
      test: ["CMD", "redis-cli", "-a", "${REDIS_PASSWORD:-redis_password}", "ping"]
      interval: 10s
      timeout: 5s
      retries: 3
      start_period: 10s

volumes:
  mongodb_data:
    driver: local
  redis_data:
    driver: local
networks:
  app-network:
    driver: bridge
